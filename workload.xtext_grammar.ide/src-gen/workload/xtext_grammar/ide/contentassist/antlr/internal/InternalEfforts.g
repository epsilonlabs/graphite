/*
 * generated by Xtext 2.30.0
 */
grammar InternalEfforts;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package workload.xtext_grammar.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package workload.xtext_grammar.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import workload.xtext_grammar.services.EffortsGrammarAccess;

}
@parser::members {
	private EffortsGrammarAccess grammarAccess;

	public void setGrammarAccess(EffortsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMain
entryRuleMain
:
{ before(grammarAccess.getMainRule()); }
	 ruleMain
{ after(grammarAccess.getMainRule()); } 
	 EOF 
;

// Rule Main
ruleMain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainAccess().getGroup()); }
		(rule__Main__Group__0)
		{ after(grammarAccess.getMainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEffort
entryRuleEffort
:
{ before(grammarAccess.getEffortRule()); }
	 ruleEffort
{ after(grammarAccess.getEffortRule()); } 
	 EOF 
;

// Rule Effort
ruleEffort 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEffortAccess().getGroup()); }
		(rule__Effort__Group__0)
		{ after(grammarAccess.getEffortAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__0__Impl
	rule__Main__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getTaskAction_0()); }
	()
	{ after(grammarAccess.getMainAccess().getTaskAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__1__Impl
	rule__Main__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getEffortsAssignment_1()); }
	(rule__Main__EffortsAssignment_1)
	{ after(grammarAccess.getMainAccess().getEffortsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getGroup_2()); }
	(rule__Main__Group_2__0)*
	{ after(grammarAccess.getMainAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Main__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group_2__0__Impl
	rule__Main__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getNEWLINETerminalRuleCall_2_0()); }
	RULE_NEWLINE
	{ after(grammarAccess.getMainAccess().getNEWLINETerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Main__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainAccess().getEffortsAssignment_2_1()); }
	(rule__Main__EffortsAssignment_2_1)
	{ after(grammarAccess.getMainAccess().getEffortsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Effort__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Effort__Group__0__Impl
	rule__Effort__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Effort__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEffortAccess().getEffortAction_0()); }
	()
	{ after(grammarAccess.getEffortAccess().getEffortAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Effort__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Effort__Group__1__Impl
	rule__Effort__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Effort__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEffortAccess().getPersonAssignment_1()); }
	(rule__Effort__PersonAssignment_1)?
	{ after(grammarAccess.getEffortAccess().getPersonAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Effort__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Effort__Group__2__Impl
	rule__Effort__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Effort__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEffortAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getEffortAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Effort__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Effort__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Effort__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEffortAccess().getMonthsAssignment_3()); }
	(rule__Effort__MonthsAssignment_3)
	{ after(grammarAccess.getEffortAccess().getMonthsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Main__EffortsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getEffortsEffortParserRuleCall_1_0()); }
		ruleEffort
		{ after(grammarAccess.getMainAccess().getEffortsEffortParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Main__EffortsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainAccess().getEffortsEffortParserRuleCall_2_1_0()); }
		ruleEffort
		{ after(grammarAccess.getMainAccess().getEffortsEffortParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Effort__PersonAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEffortAccess().getPersonPersonCrossReference_1_0()); }
		(
			{ before(grammarAccess.getEffortAccess().getPersonPersonIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getEffortAccess().getPersonPersonIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getEffortAccess().getPersonPersonCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Effort__MonthsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEffortAccess().getMonthsINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getEffortAccess().getMonthsINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NEWLINE : (' '|'\t')* '\r'? '\n' (' '|'\t')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
