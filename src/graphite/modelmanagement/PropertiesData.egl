package [%=packageName%].impl;

import java.util.Map;

import org.eclipse.core.runtime.Plugin;
import org.eclipse.emf.ecore.EFactory;
import org.eclipse.xtext.ISetup;

import graphite.shared.DerivedPropertyData;

import graphite.shared.ITransformationService;
[% for (transformationService in transformationServices) {-%]
	import [%=packageName%].transformation.[%=transformationService%];
[%}%]

import pcs.PcsPackage;
[% for (type in derivedAttributeTypes) {-%]
	import [%=packageName%].[%=type%];
[%}%]

[% for (grammarDataItem in grammarData) {-%]
	import [%=grammarDataItem.standaloneSetupFullyQualified%];
	import [%=grammarDataItem.activatorFullyQualified%];
[%}%]

@SuppressWarnings("rawtypes")
public class [%=propertiesDataClassName%] {

	public static EFactory xtextFactory = [%=packageName%].impl.[%=packageName.firstToUpperCase()%]FactoryImpl.init();
	public static String packageName = [%=packageName.firstToUpperCase()%]Package.eNS_URI;

	public static class DerivedObjectClassContainer {
		[% for (propertiesDataItem in propertiesData) {-%]
			public final static Class [%=propertiesDataItem.classNameStaticVariable%] = [%=propertiesDataItem.classContainer%];
		[%}%]
	}
	
	public static class DerivedObjectName {
		[% for (propertiesDataItem in propertiesData) {-%]
			[% for (dataItem in propertiesDataItem.data) {-%]
				public final static String [%=dataItem.derivedAttributeNameStaticVariable%] = "[%=dataItem.derivedAttributeName%]";
			[%}%]
		[%}%]
	}
	
	public static class DerivedObjectType {
		[% for (propertiesDataItem in propertiesData) {-%]
			[% for (dataItem in propertiesDataItem.data) {-%]
				public final static Class [%=dataItem.derivedAttributeNameStaticVariable%] = [%=dataItem.derivedAttributeTypeClass%];
			[%}%]
		[%}%]
	}
	
	public static class DerivedObjectIsMany {
		[% for (propertiesDataItem in propertiesData) {-%]
			[% for (dataItem in propertiesDataItem.data) {-%]
				public final static boolean [%=dataItem.derivedAttributeNameStaticVariable%] = [%=dataItem.derivedAttributeIsMany%];
			[%}%]
		[%}%]
	}
	
	public static class DerivedObjectTransformationService {
		[% for (propertiesDataItem in propertiesData) {-%]
			[% for (dataItem in propertiesDataItem.data) {-%]
				public final static ITransformationService [%=dataItem.derivedAttributeNameStaticVariable%] = [% if (dataItem.transformationService.isDefined()) {%]new [%=dataItem.transformationService%]()[%} else {%]null[%}%];
			[%}%]
		[%}%]
	}
	
	public static class ParsedStringName {
		[% for (propertiesDataItem in propertiesData) {-%]
			[% for (dataItem in propertiesDataItem.data) {-%]
				public final static String [%=dataItem.parsedAttributeStaticVariable%] = "[%=dataItem.parsedAttributeName%]";
			[%}%]
		[%}%]
	}
	
	public static class GrammarName {
		[% for (propertiesDataItem in propertiesData) {-%]
			[% for (dataItem in propertiesDataItem.data) {-%]
				public final static String [%=dataItem.parsedAttributeStaticVariable%] = "[%=dataItem.grammarName%]";
			[%}%]
		[%}%]
	}
	
	public static class GrammarSetup {
		[% for (propertiesDataItem in propertiesData) {-%]
			[% for (dataItem in propertiesDataItem.data) {-%]
				public final static ISetup [%=dataItem.parsedAttributeStaticVariable%] = new [%=dataItem.standaloneSetup%]();
			[%}%]
		[%}%]
	}
	
	public static class GrammarPlugin {
		[% for (propertiesDataItem in propertiesData) {-%]
			[% for (dataItem in propertiesDataItem.data) {-%]
				public final static Plugin [%=dataItem.parsedAttributeStaticVariable%] = [%=dataItem.activator%].getInstance();
			[%}%]
		[%}%]
	}

	public final static Map<Class, Map<String, DerivedPropertyData>> derivedPropertiesData = Map.ofEntries(
		[% for (i in Sequence{0..propertiesData.size()-1}) {-%]
		 	Map.entry(DerivedObjectClassContainer.[%=propertiesData.at(i).classNameStaticVariable%], Map.ofEntries(
			[% for (j in Sequence{0..propertiesData.at(i).data.size()-1}) {-%]
					Map.entry(DerivedObjectName.[%=propertiesData.at(i).data.at(j).derivedAttributeNameStaticVariable%], new DerivedPropertyData(DerivedObjectName.[%=propertiesData.at(i).data.at(j).derivedAttributeNameStaticVariable%], ParsedStringName.[%=propertiesData.at(i).data.at(j).parsedAttributeStaticVariable%], GrammarName.[%=propertiesData.at(i).data.at(j).parsedAttributeStaticVariable%], GrammarSetup.[%=propertiesData.at(i).data.at(j).parsedAttributeStaticVariable%], GrammarPlugin.[%=propertiesData.at(i).data.at(j).parsedAttributeStaticVariable%], DerivedObjectClassContainer.[%=propertiesData.at(i).classNameStaticVariable%], DerivedObjectType.[%=propertiesData.at(i).data.at(j).derivedAttributeNameStaticVariable%], DerivedObjectIsMany.[%=propertiesData.at(i).data.at(j).derivedAttributeNameStaticVariable%], DerivedObjectTransformationService.[%=propertiesData.at(i).data.at(j).derivedAttributeNameStaticVariable%]))[% if (j < propertiesData.at(i).data.size()-1) {%],[%} else {%]  [% if (i < propertiesData.size()-1) {%])),[%} else {%])));[%}%] [%}%]
					
			[%}%]
		[%}%]
		
	public final static Map<Class, Map<String, String>> derivedPairsMappings = Map.ofEntries(
		[% for (i in Sequence{0..propertiesData.size()-1}) {-%]
		 	Map.entry(DerivedObjectClassContainer.[%=propertiesData.at(i).classNameStaticVariable%], Map.ofEntries(
			[% for (j in Sequence{0..propertiesData.at(i).data.size()-1}) {-%]
					Map.entry(ParsedStringName.[%=propertiesData.at(i).data.at(j).parsedAttributeStaticVariable%], DerivedObjectName.[%=propertiesData.at(i).data.at(j).derivedAttributeNameStaticVariable%])[% if (j < propertiesData.at(i).data.size()-1) {%],[%} else {%]  [% if (i < propertiesData.size()-1) {%])),[%} else {%])));[%}%] [%}%]
					
			[%}%]
		[%}%]
	
	public final static Map<Class, String> identifierByType = Map.ofEntries();
	
}