/**
 * generated by Xtext 2.30.0
 */
package workload.xtext_grammar.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import workload.Effort;
import workload.Task;
import workload.xtext_grammar.services.EffortsGrammarAccess;

@SuppressWarnings("all")
public class EffortsFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private EffortsGrammarAccess _effortsGrammarAccess;

  protected void _format(final Task task, @Extension final IFormattableDocument document) {
    EList<Effort> _efforts = task.getEfforts();
    for (final Effort effort : _efforts) {
      document.<Effort>format(effort);
    }
  }

  public void format(final Object task, final IFormattableDocument document) {
    if (task instanceof XtextResource) {
      _format((XtextResource)task, document);
      return;
    } else if (task instanceof Task) {
      _format((Task)task, document);
      return;
    } else if (task instanceof EObject) {
      _format((EObject)task, document);
      return;
    } else if (task == null) {
      _format((Void)null, document);
      return;
    } else if (task != null) {
      _format(task, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(task, document).toString());
    }
  }
}
