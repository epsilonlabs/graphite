/*
 * generated by Xtext 2.30.0
 */
package workload.xtext_grammar.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import workload.Effort;
import workload.Task;
import workload.WorkloadPackage;
import workload.xtext_grammar.services.EffortsGrammarAccess;

@SuppressWarnings("all")
public class EffortsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EffortsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WorkloadPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WorkloadPackage.EFFORT:
				sequence_Effort(context, (Effort) semanticObject); 
				return; 
			case WorkloadPackage.TASK:
				sequence_Main(context, (Task) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Effort returns Effort
	 *
	 * Constraint:
	 *     (person=[Person|ID]? months=INT)
	 * </pre>
	 */
	protected void sequence_Effort(ISerializationContext context, Effort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Main returns Task
	 *
	 * Constraint:
	 *     (efforts+=Effort efforts+=Effort*)
	 * </pre>
	 */
	protected void sequence_Main(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
