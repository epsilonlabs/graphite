/*
 * generated by Xtext 2.30.0
 */
package workload.xtext_grammar.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EffortsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workload.xtext_grammar.Efforts.Main");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTaskAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEffortsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEffortsEffortParserRuleCall_1_0 = (RuleCall)cEffortsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cNEWLINETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cEffortsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEffortsEffortParserRuleCall_2_1_0 = (RuleCall)cEffortsAssignment_2_1.eContents().get(0);
		
		//Main returns Task:
		//  {Task}
		//  efforts+=Effort (NEWLINE efforts+=Effort)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Task}
		//efforts+=Effort (NEWLINE efforts+=Effort)*
		public Group getGroup() { return cGroup; }
		
		//{Task}
		public Action getTaskAction_0() { return cTaskAction_0; }
		
		//efforts+=Effort
		public Assignment getEffortsAssignment_1() { return cEffortsAssignment_1; }
		
		//Effort
		public RuleCall getEffortsEffortParserRuleCall_1_0() { return cEffortsEffortParserRuleCall_1_0; }
		
		//(NEWLINE efforts+=Effort)*
		public Group getGroup_2() { return cGroup_2; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_2_0() { return cNEWLINETerminalRuleCall_2_0; }
		
		//efforts+=Effort
		public Assignment getEffortsAssignment_2_1() { return cEffortsAssignment_2_1; }
		
		//Effort
		public RuleCall getEffortsEffortParserRuleCall_2_1_0() { return cEffortsEffortParserRuleCall_2_1_0; }
	}
	public class EffortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "workload.xtext_grammar.Efforts.Effort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEffortAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPersonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPersonPersonCrossReference_1_0 = (CrossReference)cPersonAssignment_1.eContents().get(0);
		private final RuleCall cPersonPersonIDTerminalRuleCall_1_0_1 = (RuleCall)cPersonPersonCrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMonthsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMonthsINTTerminalRuleCall_3_0 = (RuleCall)cMonthsAssignment_3.eContents().get(0);
		
		//Effort returns Effort:
		//  {Effort}
		//  (person=[Person])? ':' months=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{Effort}
		//(person=[Person])? ':' months=INT
		public Group getGroup() { return cGroup; }
		
		//{Effort}
		public Action getEffortAction_0() { return cEffortAction_0; }
		
		//(person=[Person])?
		public Assignment getPersonAssignment_1() { return cPersonAssignment_1; }
		
		//[Person]
		public CrossReference getPersonPersonCrossReference_1_0() { return cPersonPersonCrossReference_1_0; }
		
		//ID
		public RuleCall getPersonPersonIDTerminalRuleCall_1_0_1() { return cPersonPersonIDTerminalRuleCall_1_0_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//months=INT
		public Assignment getMonthsAssignment_3() { return cMonthsAssignment_3; }
		
		//INT
		public RuleCall getMonthsINTTerminalRuleCall_3_0() { return cMonthsINTTerminalRuleCall_3_0; }
	}
	
	
	private final MainElements pMain;
	private final EffortElements pEffort;
	private final TerminalRule tNEWLINE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EffortsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMain = new MainElements();
		this.pEffort = new EffortElements();
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "workload.xtext_grammar.Efforts.NEWLINE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("workload.xtext_grammar.Efforts".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Main returns Task:
	//  {Task}
	//  efforts+=Effort (NEWLINE efforts+=Effort)*;
	public MainElements getMainAccess() {
		return pMain;
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}
	
	//Effort returns Effort:
	//  {Effort}
	//  (person=[Person])? ':' months=INT;
	public EffortElements getEffortAccess() {
		return pEffort;
	}
	
	public ParserRule getEffortRule() {
		return getEffortAccess().getRule();
	}
	
	//terminal NEWLINE:
	//  (' '|'\t')* '\r'? '\n' (' '|'\t')*;
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
